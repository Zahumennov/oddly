function admin_keypair() = rell.test.keypair(
    priv = x"820D5301627C33AF91C3BCBCE8BC32D36DF7BBE232FC76AF309AE2A2A36F97FA", 
    pub = x"035A93A7DDF932BB4742CE678D330BC1A586C442A1B6FE3244AA5209F311AF8C16"
);

struct create_event_struct {
    user_kp: rell.test.keypair;
    question: text;
    expires_in_days: integer;
    bet_amount: integer;
}

struct create_event_must_fail_struct {
    user_kp: rell.test.keypair;
    question: text;
    expires_in_days: integer;
    bet_amount: integer;
    error_message: text;
}

function register_account(user_kp: rell.test.keypair, auth_descriptor: core_accounts.auth_descriptor) {
    rell.test.tx()
        .op(open_strategy.ras_open(auth_descriptor))
        .op(strategies.register_account())
        .sign(user_kp)
        .run();
}

function create_test_event(params: create_event_struct) {
    rell.test.tx()
        .op(ft_auth_operation_for(params.user_kp.pub))
        .op(create_event(params.question, params.expires_in_days, params.bet_amount))
        .sign(params.user_kp)
        .run();

    return get_events()[0];
}

function create_test_event_must_fail(params: create_event_must_fail_struct) {
    rell.test.tx()
        .op(ft_auth_operation_for(params.user_kp.pub))
        .op(create_event(params.question, params.expires_in_days, params.bet_amount))
        .sign(params.user_kp)
        .run_must_fail(params.error_message);
}

function create_test_event_and_moderate(event: event, status: event_status) {
    rell.test.tx()
        .op(moderate_event(event, status))
        .sign(admin_keypair())
        .run();
}

function create_test_bet(user_kp: rell.test.keypair, event: event, choice: choice_values) {
    rell.test.tx()
        .op(ft_auth_operation_for(user_kp.pub))
        .op(place_bet(event, choice))
        .sign(user_kp)
        .run();

    return get_bets()[0];
}